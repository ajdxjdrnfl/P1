// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ATTACK;
struct C_ATTACKDefaultTypeInternal;
extern C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
class C_LEAVE_GAME;
struct C_LEAVE_GAMEDefaultTypeInternal;
extern C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MONTAGE;
struct C_MONTAGEDefaultTypeInternal;
extern C_MONTAGEDefaultTypeInternal _C_MONTAGE_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_SKILL;
struct C_SKILLDefaultTypeInternal;
extern C_SKILLDefaultTypeInternal _C_SKILL_default_instance_;
class S_ATTACK;
struct S_ATTACKDefaultTypeInternal;
extern S_ATTACKDefaultTypeInternal _S_ATTACK_default_instance_;
class S_DEAD;
struct S_DEADDefaultTypeInternal;
extern S_DEADDefaultTypeInternal _S_DEAD_default_instance_;
class S_DESPAWN;
struct S_DESPAWNDefaultTypeInternal;
extern S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MONTAGE;
struct S_MONTAGEDefaultTypeInternal;
extern S_MONTAGEDefaultTypeInternal _S_MONTAGE_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_SKILL;
struct S_SKILLDefaultTypeInternal;
extern S_SKILLDefaultTypeInternal _S_SKILL_default_instance_;
class S_SPAWN;
struct S_SPAWNDefaultTypeInternal;
extern S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ATTACK* Arena::CreateMaybeMessage<::Protocol::C_ATTACK>(Arena*);
template<> ::Protocol::C_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MONTAGE* Arena::CreateMaybeMessage<::Protocol::C_MONTAGE>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_SKILL* Arena::CreateMaybeMessage<::Protocol::C_SKILL>(Arena*);
template<> ::Protocol::S_ATTACK* Arena::CreateMaybeMessage<::Protocol::S_ATTACK>(Arena*);
template<> ::Protocol::S_DEAD* Arena::CreateMaybeMessage<::Protocol::S_DEAD>(Arena*);
template<> ::Protocol::S_DESPAWN* Arena::CreateMaybeMessage<::Protocol::S_DESPAWN>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MONTAGE* Arena::CreateMaybeMessage<::Protocol::S_MONTAGE>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_SKILL* Arena::CreateMaybeMessage<::Protocol::S_SKILL>(Arena*);
template<> ::Protocol::S_SPAWN* Arena::CreateMaybeMessage<::Protocol::S_SPAWN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_GAME) */ {
 public:
  inline C_LEAVE_GAME() : C_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_GAME(const C_LEAVE_GAME& from);
  C_LEAVE_GAME(C_LEAVE_GAME&& from) noexcept
    : C_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_GAME& operator=(const C_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_GAME& operator=(C_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_GAME*>(
               &_C_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_LEAVE_GAME& a, C_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_GAME";
  }
  protected:
  explicit C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN) */ {
 public:
  inline S_SPAWN() : S_SPAWN(nullptr) {}
  ~S_SPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN(const S_SPAWN& from);
  S_SPAWN(S_SPAWN&& from) noexcept
    : S_SPAWN() {
    *this = ::std::move(from);
  }

  inline S_SPAWN& operator=(const S_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN& operator=(S_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN*>(
               &_S_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_SPAWN& a, S_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN& from) {
    S_SPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN";
  }
  protected:
  explicit S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::Protocol::ObjectInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_info();
  private:
  const ::Protocol::ObjectInfo& _internal_info(int index) const;
  ::Protocol::ObjectInfo* _internal_add_info();
  public:
  const ::Protocol::ObjectInfo& info(int index) const;
  ::Protocol::ObjectInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESPAWN) */ {
 public:
  inline S_DESPAWN() : S_DESPAWN(nullptr) {}
  ~S_DESPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_DESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESPAWN(const S_DESPAWN& from);
  S_DESPAWN(S_DESPAWN&& from) noexcept
    : S_DESPAWN() {
    *this = ::std::move(from);
  }

  inline S_DESPAWN& operator=(const S_DESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESPAWN& operator=(S_DESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESPAWN* internal_default_instance() {
    return reinterpret_cast<const S_DESPAWN*>(
               &_S_DESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_DESPAWN& a, S_DESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESPAWN& from) {
    S_DESPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESPAWN";
  }
  protected:
  explicit S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::Protocol::ObjectInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_info();
  private:
  const ::Protocol::ObjectInfo& _internal_info(int index) const;
  ::Protocol::ObjectInfo* _internal_add_info();
  public:
  const ::Protocol::ObjectInfo& info(int index) const;
  ::Protocol::ObjectInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_DESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MOVE& from) {
    S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kTeleportFieldNumber = 2,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // bool teleport = 2;
  void clear_teleport();
  bool teleport() const;
  void set_teleport(bool value);
  private:
  bool _internal_teleport() const;
  void _internal_set_teleport(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    bool teleport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE& from) {
    C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SKILL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SKILL) */ {
 public:
  inline C_SKILL() : C_SKILL(nullptr) {}
  ~C_SKILL() override;
  explicit PROTOBUF_CONSTEXPR C_SKILL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SKILL(const C_SKILL& from);
  C_SKILL(C_SKILL&& from) noexcept
    : C_SKILL() {
    *this = ::std::move(from);
  }

  inline C_SKILL& operator=(const C_SKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SKILL& operator=(C_SKILL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SKILL& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SKILL* internal_default_instance() {
    return reinterpret_cast<const C_SKILL*>(
               &_C_SKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_SKILL& a, C_SKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SKILL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SKILL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SKILL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SKILL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SKILL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SKILL& from) {
    C_SKILL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SKILL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SKILL";
  }
  protected:
  explicit C_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kSkillidFieldNumber = 2,
    kDamageFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kYawFieldNumber = 6,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // uint64 skillid = 2;
  void clear_skillid();
  uint64_t skillid() const;
  void set_skillid(uint64_t value);
  private:
  uint64_t _internal_skillid() const;
  void _internal_set_skillid(uint64_t value);
  public:

  // float damage = 3;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float yaw = 6;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SKILL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    uint64_t skillid_;
    float damage_;
    float x_;
    float y_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SKILL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SKILL) */ {
 public:
  inline S_SKILL() : S_SKILL(nullptr) {}
  ~S_SKILL() override;
  explicit PROTOBUF_CONSTEXPR S_SKILL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SKILL(const S_SKILL& from);
  S_SKILL(S_SKILL&& from) noexcept
    : S_SKILL() {
    *this = ::std::move(from);
  }

  inline S_SKILL& operator=(const S_SKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SKILL& operator=(S_SKILL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SKILL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SKILL* internal_default_instance() {
    return reinterpret_cast<const S_SKILL*>(
               &_S_SKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_SKILL& a, S_SKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SKILL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SKILL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SKILL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SKILL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SKILL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SKILL& from) {
    S_SKILL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SKILL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SKILL";
  }
  protected:
  explicit S_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kSkillactorFieldNumber = 2,
    kSkillidFieldNumber = 3,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // .Protocol.ObjectInfo skillactor = 2;
  bool has_skillactor() const;
  private:
  bool _internal_has_skillactor() const;
  public:
  void clear_skillactor();
  const ::Protocol::ObjectInfo& skillactor() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_skillactor();
  ::Protocol::ObjectInfo* mutable_skillactor();
  void set_allocated_skillactor(::Protocol::ObjectInfo* skillactor);
  private:
  const ::Protocol::ObjectInfo& _internal_skillactor() const;
  ::Protocol::ObjectInfo* _internal_mutable_skillactor();
  public:
  void unsafe_arena_set_allocated_skillactor(
      ::Protocol::ObjectInfo* skillactor);
  ::Protocol::ObjectInfo* unsafe_arena_release_skillactor();

  // uint64 skillid = 3;
  void clear_skillid();
  uint64_t skillid() const;
  void set_skillid(uint64_t value);
  private:
  uint64_t _internal_skillid() const;
  void _internal_set_skillid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SKILL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    ::Protocol::ObjectInfo* skillactor_;
    uint64_t skillid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ATTACK) */ {
 public:
  inline C_ATTACK() : C_ATTACK(nullptr) {}
  ~C_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR C_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK(const C_ATTACK& from);
  C_ATTACK(C_ATTACK&& from) noexcept
    : C_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_ATTACK& operator=(const C_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK& operator=(C_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK*>(
               &_C_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_ATTACK& a, C_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ATTACK& from) {
    C_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ATTACK";
  }
  protected:
  explicit C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kSkillactorFieldNumber = 2,
    kVictimFieldNumber = 3,
    kCounterFieldNumber = 4,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // .Protocol.ObjectInfo skillactor = 2;
  bool has_skillactor() const;
  private:
  bool _internal_has_skillactor() const;
  public:
  void clear_skillactor();
  const ::Protocol::ObjectInfo& skillactor() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_skillactor();
  ::Protocol::ObjectInfo* mutable_skillactor();
  void set_allocated_skillactor(::Protocol::ObjectInfo* skillactor);
  private:
  const ::Protocol::ObjectInfo& _internal_skillactor() const;
  ::Protocol::ObjectInfo* _internal_mutable_skillactor();
  public:
  void unsafe_arena_set_allocated_skillactor(
      ::Protocol::ObjectInfo* skillactor);
  ::Protocol::ObjectInfo* unsafe_arena_release_skillactor();

  // .Protocol.ObjectInfo victim = 3;
  bool has_victim() const;
  private:
  bool _internal_has_victim() const;
  public:
  void clear_victim();
  const ::Protocol::ObjectInfo& victim() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_victim();
  ::Protocol::ObjectInfo* mutable_victim();
  void set_allocated_victim(::Protocol::ObjectInfo* victim);
  private:
  const ::Protocol::ObjectInfo& _internal_victim() const;
  ::Protocol::ObjectInfo* _internal_mutable_victim();
  public:
  void unsafe_arena_set_allocated_victim(
      ::Protocol::ObjectInfo* victim);
  ::Protocol::ObjectInfo* unsafe_arena_release_victim();

  // bool counter = 4;
  void clear_counter();
  bool counter() const;
  void set_counter(bool value);
  private:
  bool _internal_counter() const;
  void _internal_set_counter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    ::Protocol::ObjectInfo* skillactor_;
    ::Protocol::ObjectInfo* victim_;
    bool counter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ATTACK) */ {
 public:
  inline S_ATTACK() : S_ATTACK(nullptr) {}
  ~S_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR S_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACK(const S_ATTACK& from);
  S_ATTACK(S_ATTACK&& from) noexcept
    : S_ATTACK() {
    *this = ::std::move(from);
  }

  inline S_ATTACK& operator=(const S_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACK& operator=(S_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACK* internal_default_instance() {
    return reinterpret_cast<const S_ATTACK*>(
               &_S_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_ATTACK& a, S_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ATTACK& from) {
    S_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ATTACK";
  }
  protected:
  explicit S_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kSkillactorFieldNumber = 2,
    kVictimFieldNumber = 3,
    kSkillidFieldNumber = 4,
    kDamageFieldNumber = 5,
    kCounterFieldNumber = 6,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // .Protocol.ObjectInfo skillactor = 2;
  bool has_skillactor() const;
  private:
  bool _internal_has_skillactor() const;
  public:
  void clear_skillactor();
  const ::Protocol::ObjectInfo& skillactor() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_skillactor();
  ::Protocol::ObjectInfo* mutable_skillactor();
  void set_allocated_skillactor(::Protocol::ObjectInfo* skillactor);
  private:
  const ::Protocol::ObjectInfo& _internal_skillactor() const;
  ::Protocol::ObjectInfo* _internal_mutable_skillactor();
  public:
  void unsafe_arena_set_allocated_skillactor(
      ::Protocol::ObjectInfo* skillactor);
  ::Protocol::ObjectInfo* unsafe_arena_release_skillactor();

  // .Protocol.ObjectInfo victim = 3;
  bool has_victim() const;
  private:
  bool _internal_has_victim() const;
  public:
  void clear_victim();
  const ::Protocol::ObjectInfo& victim() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_victim();
  ::Protocol::ObjectInfo* mutable_victim();
  void set_allocated_victim(::Protocol::ObjectInfo* victim);
  private:
  const ::Protocol::ObjectInfo& _internal_victim() const;
  ::Protocol::ObjectInfo* _internal_mutable_victim();
  public:
  void unsafe_arena_set_allocated_victim(
      ::Protocol::ObjectInfo* victim);
  ::Protocol::ObjectInfo* unsafe_arena_release_victim();

  // uint64 skillid = 4;
  void clear_skillid();
  uint64_t skillid() const;
  void set_skillid(uint64_t value);
  private:
  uint64_t _internal_skillid() const;
  void _internal_set_skillid(uint64_t value);
  public:

  // float damage = 5;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // bool counter = 6;
  void clear_counter();
  bool counter() const;
  void set_counter(bool value);
  private:
  bool _internal_counter() const;
  void _internal_set_counter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    ::Protocol::ObjectInfo* skillactor_;
    ::Protocol::ObjectInfo* victim_;
    uint64_t skillid_;
    float damage_;
    bool counter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MONTAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MONTAGE) */ {
 public:
  inline C_MONTAGE() : C_MONTAGE(nullptr) {}
  ~C_MONTAGE() override;
  explicit PROTOBUF_CONSTEXPR C_MONTAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MONTAGE(const C_MONTAGE& from);
  C_MONTAGE(C_MONTAGE&& from) noexcept
    : C_MONTAGE() {
    *this = ::std::move(from);
  }

  inline C_MONTAGE& operator=(const C_MONTAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MONTAGE& operator=(C_MONTAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MONTAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MONTAGE* internal_default_instance() {
    return reinterpret_cast<const C_MONTAGE*>(
               &_C_MONTAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_MONTAGE& a, C_MONTAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MONTAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MONTAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MONTAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MONTAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MONTAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MONTAGE& from) {
    C_MONTAGE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MONTAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MONTAGE";
  }
  protected:
  explicit C_MONTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kIdFieldNumber = 3,
    kSectionNumFieldNumber = 4,
    kIsstopFieldNumber = 2,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // uint64 id = 3;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 section_num = 4;
  void clear_section_num();
  uint64_t section_num() const;
  void set_section_num(uint64_t value);
  private:
  uint64_t _internal_section_num() const;
  void _internal_set_section_num(uint64_t value);
  public:

  // bool isstop = 2;
  void clear_isstop();
  bool isstop() const;
  void set_isstop(bool value);
  private:
  bool _internal_isstop() const;
  void _internal_set_isstop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MONTAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    uint64_t id_;
    uint64_t section_num_;
    bool isstop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MONTAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MONTAGE) */ {
 public:
  inline S_MONTAGE() : S_MONTAGE(nullptr) {}
  ~S_MONTAGE() override;
  explicit PROTOBUF_CONSTEXPR S_MONTAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MONTAGE(const S_MONTAGE& from);
  S_MONTAGE(S_MONTAGE&& from) noexcept
    : S_MONTAGE() {
    *this = ::std::move(from);
  }

  inline S_MONTAGE& operator=(const S_MONTAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MONTAGE& operator=(S_MONTAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MONTAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MONTAGE* internal_default_instance() {
    return reinterpret_cast<const S_MONTAGE*>(
               &_S_MONTAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_MONTAGE& a, S_MONTAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MONTAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MONTAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MONTAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MONTAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MONTAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MONTAGE& from) {
    S_MONTAGE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MONTAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MONTAGE";
  }
  protected:
  explicit S_MONTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasterFieldNumber = 1,
    kIdFieldNumber = 3,
    kSectionNumFieldNumber = 4,
    kIsstopFieldNumber = 2,
    kScalableFieldNumber = 5,
    kDurationFieldNumber = 6,
  };
  // .Protocol.ObjectInfo caster = 1;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  const ::Protocol::ObjectInfo& caster() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_caster();
  ::Protocol::ObjectInfo* mutable_caster();
  void set_allocated_caster(::Protocol::ObjectInfo* caster);
  private:
  const ::Protocol::ObjectInfo& _internal_caster() const;
  ::Protocol::ObjectInfo* _internal_mutable_caster();
  public:
  void unsafe_arena_set_allocated_caster(
      ::Protocol::ObjectInfo* caster);
  ::Protocol::ObjectInfo* unsafe_arena_release_caster();

  // uint64 id = 3;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 section_num = 4;
  void clear_section_num();
  uint64_t section_num() const;
  void set_section_num(uint64_t value);
  private:
  uint64_t _internal_section_num() const;
  void _internal_set_section_num(uint64_t value);
  public:

  // bool isstop = 2;
  void clear_isstop();
  bool isstop() const;
  void set_isstop(bool value);
  private:
  bool _internal_isstop() const;
  void _internal_set_isstop(bool value);
  public:

  // bool scalable = 5;
  void clear_scalable();
  bool scalable() const;
  void set_scalable(bool value);
  private:
  bool _internal_scalable() const;
  void _internal_set_scalable(bool value);
  public:

  // float duration = 6;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MONTAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* caster_;
    uint64_t id_;
    uint64_t section_num_;
    bool isstop_;
    bool scalable_;
    float duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DEAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DEAD) */ {
 public:
  inline S_DEAD() : S_DEAD(nullptr) {}
  ~S_DEAD() override;
  explicit PROTOBUF_CONSTEXPR S_DEAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DEAD(const S_DEAD& from);
  S_DEAD(S_DEAD&& from) noexcept
    : S_DEAD() {
    *this = ::std::move(from);
  }

  inline S_DEAD& operator=(const S_DEAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DEAD& operator=(S_DEAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DEAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DEAD* internal_default_instance() {
    return reinterpret_cast<const S_DEAD*>(
               &_S_DEAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_DEAD& a, S_DEAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DEAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DEAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DEAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DEAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DEAD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DEAD& from) {
    S_DEAD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DEAD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DEAD";
  }
  protected:
  explicit S_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_DEAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// .Protocol.ObjectInfo info = 2;
inline bool S_ENTER_GAME::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_ENTER_GAME::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_ENTER_GAME::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ENTER_GAME::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.info)
  return _internal_info();
}
inline void S_ENTER_GAME::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_GAME.info)
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.info)
  return _msg;
}
inline void S_ENTER_GAME::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.info)
}

// -------------------------------------------------------------------

// C_LEAVE_GAME

// -------------------------------------------------------------------

// S_SPAWN

// repeated .Protocol.ObjectInfo info = 1;
inline int S_SPAWN::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int S_SPAWN::info_size() const {
  return _internal_info_size();
}
inline ::Protocol::ObjectInfo* S_SPAWN::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN.info)
  return _impl_.info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_SPAWN::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN.info)
  return &_impl_.info_;
}
inline const ::Protocol::ObjectInfo& S_SPAWN::_internal_info(int index) const {
  return _impl_.info_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_SPAWN::info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.info)
  return _internal_info(index);
}
inline ::Protocol::ObjectInfo* S_SPAWN::_internal_add_info() {
  return _impl_.info_.Add();
}
inline ::Protocol::ObjectInfo* S_SPAWN::add_info() {
  ::Protocol::ObjectInfo* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_SPAWN::info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN.info)
  return _impl_.info_;
}

// -------------------------------------------------------------------

// S_DESPAWN

// repeated .Protocol.ObjectInfo info = 1;
inline int S_DESPAWN::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int S_DESPAWN::info_size() const {
  return _internal_info_size();
}
inline ::Protocol::ObjectInfo* S_DESPAWN::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DESPAWN.info)
  return _impl_.info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_DESPAWN::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DESPAWN.info)
  return &_impl_.info_;
}
inline const ::Protocol::ObjectInfo& S_DESPAWN::_internal_info(int index) const {
  return _impl_.info_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_DESPAWN::info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESPAWN.info)
  return _internal_info(index);
}
inline ::Protocol::ObjectInfo* S_DESPAWN::_internal_add_info() {
  return _impl_.info_.Add();
}
inline ::Protocol::ObjectInfo* S_DESPAWN::add_info() {
  ::Protocol::ObjectInfo* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:Protocol.S_DESPAWN.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_DESPAWN::info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DESPAWN.info)
  return _impl_.info_;
}

// -------------------------------------------------------------------

// S_MOVE

// .Protocol.ObjectInfo info = 1;
inline bool S_MOVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_MOVE::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_MOVE::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_MOVE::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.info)
  return _internal_info();
}
inline void S_MOVE::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.info)
}
inline ::Protocol::ObjectInfo* S_MOVE::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_MOVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_MOVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_MOVE::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.info)
  return _msg;
}
inline void S_MOVE::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.info)
}

// bool teleport = 2;
inline void S_MOVE::clear_teleport() {
  _impl_.teleport_ = false;
}
inline bool S_MOVE::_internal_teleport() const {
  return _impl_.teleport_;
}
inline bool S_MOVE::teleport() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.teleport)
  return _internal_teleport();
}
inline void S_MOVE::_internal_set_teleport(bool value) {
  
  _impl_.teleport_ = value;
}
inline void S_MOVE::set_teleport(bool value) {
  _internal_set_teleport(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.teleport)
}

// -------------------------------------------------------------------

// C_MOVE

// .Protocol.ObjectInfo info = 1;
inline bool C_MOVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_MOVE::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& C_MOVE::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_MOVE::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.info)
  return _internal_info();
}
inline void C_MOVE::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.info)
}
inline ::Protocol::ObjectInfo* C_MOVE::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_MOVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_MOVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_MOVE::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.info)
  return _msg;
}
inline void C_MOVE::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.info)
}

// -------------------------------------------------------------------

// C_SKILL

// .Protocol.ObjectInfo caster = 1;
inline bool C_SKILL::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool C_SKILL::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& C_SKILL::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_SKILL::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.caster)
  return _internal_caster();
}
inline void C_SKILL::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SKILL.caster)
}
inline ::Protocol::ObjectInfo* C_SKILL::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_SKILL::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.C_SKILL.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_SKILL::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* C_SKILL::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SKILL.caster)
  return _msg;
}
inline void C_SKILL::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SKILL.caster)
}

// uint64 skillid = 2;
inline void C_SKILL::clear_skillid() {
  _impl_.skillid_ = uint64_t{0u};
}
inline uint64_t C_SKILL::_internal_skillid() const {
  return _impl_.skillid_;
}
inline uint64_t C_SKILL::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.skillid)
  return _internal_skillid();
}
inline void C_SKILL::_internal_set_skillid(uint64_t value) {
  
  _impl_.skillid_ = value;
}
inline void C_SKILL::set_skillid(uint64_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SKILL.skillid)
}

// float damage = 3;
inline void C_SKILL::clear_damage() {
  _impl_.damage_ = 0;
}
inline float C_SKILL::_internal_damage() const {
  return _impl_.damage_;
}
inline float C_SKILL::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.damage)
  return _internal_damage();
}
inline void C_SKILL::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void C_SKILL::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SKILL.damage)
}

// float x = 4;
inline void C_SKILL::clear_x() {
  _impl_.x_ = 0;
}
inline float C_SKILL::_internal_x() const {
  return _impl_.x_;
}
inline float C_SKILL::x() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.x)
  return _internal_x();
}
inline void C_SKILL::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void C_SKILL::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SKILL.x)
}

// float y = 5;
inline void C_SKILL::clear_y() {
  _impl_.y_ = 0;
}
inline float C_SKILL::_internal_y() const {
  return _impl_.y_;
}
inline float C_SKILL::y() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.y)
  return _internal_y();
}
inline void C_SKILL::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void C_SKILL::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SKILL.y)
}

// float yaw = 6;
inline void C_SKILL::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float C_SKILL::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float C_SKILL::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.yaw)
  return _internal_yaw();
}
inline void C_SKILL::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void C_SKILL::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SKILL.yaw)
}

// -------------------------------------------------------------------

// S_SKILL

// .Protocol.ObjectInfo caster = 1;
inline bool S_SKILL::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool S_SKILL::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& S_SKILL::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_SKILL::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.caster)
  return _internal_caster();
}
inline void S_SKILL::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SKILL.caster)
}
inline ::Protocol::ObjectInfo* S_SKILL::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILL::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.S_SKILL.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILL::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* S_SKILL::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SKILL.caster)
  return _msg;
}
inline void S_SKILL::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SKILL.caster)
}

// .Protocol.ObjectInfo skillactor = 2;
inline bool S_SKILL::_internal_has_skillactor() const {
  return this != internal_default_instance() && _impl_.skillactor_ != nullptr;
}
inline bool S_SKILL::has_skillactor() const {
  return _internal_has_skillactor();
}
inline const ::Protocol::ObjectInfo& S_SKILL::_internal_skillactor() const {
  const ::Protocol::ObjectInfo* p = _impl_.skillactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_SKILL::skillactor() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.skillactor)
  return _internal_skillactor();
}
inline void S_SKILL::unsafe_arena_set_allocated_skillactor(
    ::Protocol::ObjectInfo* skillactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  _impl_.skillactor_ = skillactor;
  if (skillactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SKILL.skillactor)
}
inline ::Protocol::ObjectInfo* S_SKILL::release_skillactor() {
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILL::unsafe_arena_release_skillactor() {
  // @@protoc_insertion_point(field_release:Protocol.S_SKILL.skillactor)
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILL::_internal_mutable_skillactor() {
  
  if (_impl_.skillactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.skillactor_ = p;
  }
  return _impl_.skillactor_;
}
inline ::Protocol::ObjectInfo* S_SKILL::mutable_skillactor() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_skillactor();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SKILL.skillactor)
  return _msg;
}
inline void S_SKILL::set_allocated_skillactor(::Protocol::ObjectInfo* skillactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  if (skillactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skillactor));
    if (message_arena != submessage_arena) {
      skillactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skillactor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skillactor_ = skillactor;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SKILL.skillactor)
}

// uint64 skillid = 3;
inline void S_SKILL::clear_skillid() {
  _impl_.skillid_ = uint64_t{0u};
}
inline uint64_t S_SKILL::_internal_skillid() const {
  return _impl_.skillid_;
}
inline uint64_t S_SKILL::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.skillid)
  return _internal_skillid();
}
inline void S_SKILL::_internal_set_skillid(uint64_t value) {
  
  _impl_.skillid_ = value;
}
inline void S_SKILL::set_skillid(uint64_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SKILL.skillid)
}

// -------------------------------------------------------------------

// C_ATTACK

// .Protocol.ObjectInfo caster = 1;
inline bool C_ATTACK::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool C_ATTACK::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& C_ATTACK::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_ATTACK::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.caster)
  return _internal_caster();
}
inline void C_ATTACK::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK.caster)
}
inline ::Protocol::ObjectInfo* C_ATTACK::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* C_ATTACK::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK.caster)
  return _msg;
}
inline void C_ATTACK::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK.caster)
}

// .Protocol.ObjectInfo skillactor = 2;
inline bool C_ATTACK::_internal_has_skillactor() const {
  return this != internal_default_instance() && _impl_.skillactor_ != nullptr;
}
inline bool C_ATTACK::has_skillactor() const {
  return _internal_has_skillactor();
}
inline const ::Protocol::ObjectInfo& C_ATTACK::_internal_skillactor() const {
  const ::Protocol::ObjectInfo* p = _impl_.skillactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_ATTACK::skillactor() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.skillactor)
  return _internal_skillactor();
}
inline void C_ATTACK::unsafe_arena_set_allocated_skillactor(
    ::Protocol::ObjectInfo* skillactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  _impl_.skillactor_ = skillactor;
  if (skillactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK.skillactor)
}
inline ::Protocol::ObjectInfo* C_ATTACK::release_skillactor() {
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::unsafe_arena_release_skillactor() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK.skillactor)
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::_internal_mutable_skillactor() {
  
  if (_impl_.skillactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.skillactor_ = p;
  }
  return _impl_.skillactor_;
}
inline ::Protocol::ObjectInfo* C_ATTACK::mutable_skillactor() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_skillactor();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK.skillactor)
  return _msg;
}
inline void C_ATTACK::set_allocated_skillactor(::Protocol::ObjectInfo* skillactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  if (skillactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skillactor));
    if (message_arena != submessage_arena) {
      skillactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skillactor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skillactor_ = skillactor;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK.skillactor)
}

// .Protocol.ObjectInfo victim = 3;
inline bool C_ATTACK::_internal_has_victim() const {
  return this != internal_default_instance() && _impl_.victim_ != nullptr;
}
inline bool C_ATTACK::has_victim() const {
  return _internal_has_victim();
}
inline const ::Protocol::ObjectInfo& C_ATTACK::_internal_victim() const {
  const ::Protocol::ObjectInfo* p = _impl_.victim_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_ATTACK::victim() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.victim)
  return _internal_victim();
}
inline void C_ATTACK::unsafe_arena_set_allocated_victim(
    ::Protocol::ObjectInfo* victim) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_);
  }
  _impl_.victim_ = victim;
  if (victim) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK.victim)
}
inline ::Protocol::ObjectInfo* C_ATTACK::release_victim() {
  
  ::Protocol::ObjectInfo* temp = _impl_.victim_;
  _impl_.victim_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::unsafe_arena_release_victim() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK.victim)
  
  ::Protocol::ObjectInfo* temp = _impl_.victim_;
  _impl_.victim_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_ATTACK::_internal_mutable_victim() {
  
  if (_impl_.victim_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.victim_ = p;
  }
  return _impl_.victim_;
}
inline ::Protocol::ObjectInfo* C_ATTACK::mutable_victim() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_victim();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK.victim)
  return _msg;
}
inline void C_ATTACK::set_allocated_victim(::Protocol::ObjectInfo* victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_);
  }
  if (victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victim));
    if (message_arena != submessage_arena) {
      victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victim, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.victim_ = victim;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK.victim)
}

// bool counter = 4;
inline void C_ATTACK::clear_counter() {
  _impl_.counter_ = false;
}
inline bool C_ATTACK::_internal_counter() const {
  return _impl_.counter_;
}
inline bool C_ATTACK::counter() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.counter)
  return _internal_counter();
}
inline void C_ATTACK::_internal_set_counter(bool value) {
  
  _impl_.counter_ = value;
}
inline void C_ATTACK::set_counter(bool value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.counter)
}

// -------------------------------------------------------------------

// S_ATTACK

// .Protocol.ObjectInfo caster = 1;
inline bool S_ATTACK::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool S_ATTACK::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& S_ATTACK::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ATTACK::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.caster)
  return _internal_caster();
}
inline void S_ATTACK::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACK.caster)
}
inline ::Protocol::ObjectInfo* S_ATTACK::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACK.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* S_ATTACK::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACK.caster)
  return _msg;
}
inline void S_ATTACK::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACK.caster)
}

// .Protocol.ObjectInfo skillactor = 2;
inline bool S_ATTACK::_internal_has_skillactor() const {
  return this != internal_default_instance() && _impl_.skillactor_ != nullptr;
}
inline bool S_ATTACK::has_skillactor() const {
  return _internal_has_skillactor();
}
inline const ::Protocol::ObjectInfo& S_ATTACK::_internal_skillactor() const {
  const ::Protocol::ObjectInfo* p = _impl_.skillactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ATTACK::skillactor() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.skillactor)
  return _internal_skillactor();
}
inline void S_ATTACK::unsafe_arena_set_allocated_skillactor(
    ::Protocol::ObjectInfo* skillactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  _impl_.skillactor_ = skillactor;
  if (skillactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACK.skillactor)
}
inline ::Protocol::ObjectInfo* S_ATTACK::release_skillactor() {
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::unsafe_arena_release_skillactor() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACK.skillactor)
  
  ::Protocol::ObjectInfo* temp = _impl_.skillactor_;
  _impl_.skillactor_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::_internal_mutable_skillactor() {
  
  if (_impl_.skillactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.skillactor_ = p;
  }
  return _impl_.skillactor_;
}
inline ::Protocol::ObjectInfo* S_ATTACK::mutable_skillactor() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_skillactor();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACK.skillactor)
  return _msg;
}
inline void S_ATTACK::set_allocated_skillactor(::Protocol::ObjectInfo* skillactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skillactor_);
  }
  if (skillactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skillactor));
    if (message_arena != submessage_arena) {
      skillactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skillactor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skillactor_ = skillactor;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACK.skillactor)
}

// .Protocol.ObjectInfo victim = 3;
inline bool S_ATTACK::_internal_has_victim() const {
  return this != internal_default_instance() && _impl_.victim_ != nullptr;
}
inline bool S_ATTACK::has_victim() const {
  return _internal_has_victim();
}
inline const ::Protocol::ObjectInfo& S_ATTACK::_internal_victim() const {
  const ::Protocol::ObjectInfo* p = _impl_.victim_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ATTACK::victim() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.victim)
  return _internal_victim();
}
inline void S_ATTACK::unsafe_arena_set_allocated_victim(
    ::Protocol::ObjectInfo* victim) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_);
  }
  _impl_.victim_ = victim;
  if (victim) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ATTACK.victim)
}
inline ::Protocol::ObjectInfo* S_ATTACK::release_victim() {
  
  ::Protocol::ObjectInfo* temp = _impl_.victim_;
  _impl_.victim_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::unsafe_arena_release_victim() {
  // @@protoc_insertion_point(field_release:Protocol.S_ATTACK.victim)
  
  ::Protocol::ObjectInfo* temp = _impl_.victim_;
  _impl_.victim_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ATTACK::_internal_mutable_victim() {
  
  if (_impl_.victim_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.victim_ = p;
  }
  return _impl_.victim_;
}
inline ::Protocol::ObjectInfo* S_ATTACK::mutable_victim() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_victim();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ATTACK.victim)
  return _msg;
}
inline void S_ATTACK::set_allocated_victim(::Protocol::ObjectInfo* victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_);
  }
  if (victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victim));
    if (message_arena != submessage_arena) {
      victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victim, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.victim_ = victim;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ATTACK.victim)
}

// uint64 skillid = 4;
inline void S_ATTACK::clear_skillid() {
  _impl_.skillid_ = uint64_t{0u};
}
inline uint64_t S_ATTACK::_internal_skillid() const {
  return _impl_.skillid_;
}
inline uint64_t S_ATTACK::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.skillid)
  return _internal_skillid();
}
inline void S_ATTACK::_internal_set_skillid(uint64_t value) {
  
  _impl_.skillid_ = value;
}
inline void S_ATTACK::set_skillid(uint64_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK.skillid)
}

// float damage = 5;
inline void S_ATTACK::clear_damage() {
  _impl_.damage_ = 0;
}
inline float S_ATTACK::_internal_damage() const {
  return _impl_.damage_;
}
inline float S_ATTACK::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.damage)
  return _internal_damage();
}
inline void S_ATTACK::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void S_ATTACK::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK.damage)
}

// bool counter = 6;
inline void S_ATTACK::clear_counter() {
  _impl_.counter_ = false;
}
inline bool S_ATTACK::_internal_counter() const {
  return _impl_.counter_;
}
inline bool S_ATTACK::counter() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.counter)
  return _internal_counter();
}
inline void S_ATTACK::_internal_set_counter(bool value) {
  
  _impl_.counter_ = value;
}
inline void S_ATTACK::set_counter(bool value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK.counter)
}

// -------------------------------------------------------------------

// C_MONTAGE

// .Protocol.ObjectInfo caster = 1;
inline bool C_MONTAGE::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool C_MONTAGE::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& C_MONTAGE::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_MONTAGE::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONTAGE.caster)
  return _internal_caster();
}
inline void C_MONTAGE::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MONTAGE.caster)
}
inline ::Protocol::ObjectInfo* C_MONTAGE::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_MONTAGE::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.C_MONTAGE.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_MONTAGE::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* C_MONTAGE::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MONTAGE.caster)
  return _msg;
}
inline void C_MONTAGE::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MONTAGE.caster)
}

// bool isstop = 2;
inline void C_MONTAGE::clear_isstop() {
  _impl_.isstop_ = false;
}
inline bool C_MONTAGE::_internal_isstop() const {
  return _impl_.isstop_;
}
inline bool C_MONTAGE::isstop() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONTAGE.isstop)
  return _internal_isstop();
}
inline void C_MONTAGE::_internal_set_isstop(bool value) {
  
  _impl_.isstop_ = value;
}
inline void C_MONTAGE::set_isstop(bool value) {
  _internal_set_isstop(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONTAGE.isstop)
}

// uint64 id = 3;
inline void C_MONTAGE::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t C_MONTAGE::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t C_MONTAGE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONTAGE.id)
  return _internal_id();
}
inline void C_MONTAGE::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void C_MONTAGE::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONTAGE.id)
}

// uint64 section_num = 4;
inline void C_MONTAGE::clear_section_num() {
  _impl_.section_num_ = uint64_t{0u};
}
inline uint64_t C_MONTAGE::_internal_section_num() const {
  return _impl_.section_num_;
}
inline uint64_t C_MONTAGE::section_num() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONTAGE.section_num)
  return _internal_section_num();
}
inline void C_MONTAGE::_internal_set_section_num(uint64_t value) {
  
  _impl_.section_num_ = value;
}
inline void C_MONTAGE::set_section_num(uint64_t value) {
  _internal_set_section_num(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONTAGE.section_num)
}

// -------------------------------------------------------------------

// S_MONTAGE

// .Protocol.ObjectInfo caster = 1;
inline bool S_MONTAGE::_internal_has_caster() const {
  return this != internal_default_instance() && _impl_.caster_ != nullptr;
}
inline bool S_MONTAGE::has_caster() const {
  return _internal_has_caster();
}
inline const ::Protocol::ObjectInfo& S_MONTAGE::_internal_caster() const {
  const ::Protocol::ObjectInfo* p = _impl_.caster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_MONTAGE::caster() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.caster)
  return _internal_caster();
}
inline void S_MONTAGE::unsafe_arena_set_allocated_caster(
    ::Protocol::ObjectInfo* caster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  _impl_.caster_ = caster;
  if (caster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MONTAGE.caster)
}
inline ::Protocol::ObjectInfo* S_MONTAGE::release_caster() {
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_MONTAGE::unsafe_arena_release_caster() {
  // @@protoc_insertion_point(field_release:Protocol.S_MONTAGE.caster)
  
  ::Protocol::ObjectInfo* temp = _impl_.caster_;
  _impl_.caster_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_MONTAGE::_internal_mutable_caster() {
  
  if (_impl_.caster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.caster_ = p;
  }
  return _impl_.caster_;
}
inline ::Protocol::ObjectInfo* S_MONTAGE::mutable_caster() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_caster();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MONTAGE.caster)
  return _msg;
}
inline void S_MONTAGE::set_allocated_caster(::Protocol::ObjectInfo* caster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caster_);
  }
  if (caster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster));
    if (message_arena != submessage_arena) {
      caster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.caster_ = caster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MONTAGE.caster)
}

// bool isstop = 2;
inline void S_MONTAGE::clear_isstop() {
  _impl_.isstop_ = false;
}
inline bool S_MONTAGE::_internal_isstop() const {
  return _impl_.isstop_;
}
inline bool S_MONTAGE::isstop() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.isstop)
  return _internal_isstop();
}
inline void S_MONTAGE::_internal_set_isstop(bool value) {
  
  _impl_.isstop_ = value;
}
inline void S_MONTAGE::set_isstop(bool value) {
  _internal_set_isstop(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONTAGE.isstop)
}

// uint64 id = 3;
inline void S_MONTAGE::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t S_MONTAGE::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t S_MONTAGE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.id)
  return _internal_id();
}
inline void S_MONTAGE::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void S_MONTAGE::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONTAGE.id)
}

// uint64 section_num = 4;
inline void S_MONTAGE::clear_section_num() {
  _impl_.section_num_ = uint64_t{0u};
}
inline uint64_t S_MONTAGE::_internal_section_num() const {
  return _impl_.section_num_;
}
inline uint64_t S_MONTAGE::section_num() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.section_num)
  return _internal_section_num();
}
inline void S_MONTAGE::_internal_set_section_num(uint64_t value) {
  
  _impl_.section_num_ = value;
}
inline void S_MONTAGE::set_section_num(uint64_t value) {
  _internal_set_section_num(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONTAGE.section_num)
}

// bool scalable = 5;
inline void S_MONTAGE::clear_scalable() {
  _impl_.scalable_ = false;
}
inline bool S_MONTAGE::_internal_scalable() const {
  return _impl_.scalable_;
}
inline bool S_MONTAGE::scalable() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.scalable)
  return _internal_scalable();
}
inline void S_MONTAGE::_internal_set_scalable(bool value) {
  
  _impl_.scalable_ = value;
}
inline void S_MONTAGE::set_scalable(bool value) {
  _internal_set_scalable(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONTAGE.scalable)
}

// float duration = 6;
inline void S_MONTAGE::clear_duration() {
  _impl_.duration_ = 0;
}
inline float S_MONTAGE::_internal_duration() const {
  return _impl_.duration_;
}
inline float S_MONTAGE::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONTAGE.duration)
  return _internal_duration();
}
inline void S_MONTAGE::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void S_MONTAGE::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONTAGE.duration)
}

// -------------------------------------------------------------------

// S_DEAD

// .Protocol.ObjectInfo info = 1;
inline bool S_DEAD::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_DEAD::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_DEAD::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_DEAD::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEAD.info)
  return _internal_info();
}
inline void S_DEAD::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEAD.info)
}
inline ::Protocol::ObjectInfo* S_DEAD::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_DEAD::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEAD.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_DEAD::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_DEAD::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEAD.info)
  return _msg;
}
inline void S_DEAD::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEAD.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
