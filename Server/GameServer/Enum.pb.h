// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MOVE_STATE_JUMP = 3,
  MOVE_STATE_SKILL = 4,
  MOVE_STATE_STUN = 5,
  MOVE_STATE_DEAD = 6,
  MOVE_STATE_STOP = 7,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveState_IsValid(int value);
constexpr MoveState MoveState_MIN = MOVE_STATE_NONE;
constexpr MoveState MoveState_MAX = MOVE_STATE_STOP;
constexpr int MoveState_ARRAYSIZE = MoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor();
template<typename T>
inline const std::string& MoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveState_descriptor(), enum_t_value);
}
inline bool MoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveState>(
    MoveState_descriptor(), name, value);
}
enum CasterType : int {
  CASTER_TYPE_NONE = 0,
  CASTER_TYPE_WARRIOR = 1,
  CASTER_TYPE_MAGE = 2,
  CASTER_TYPE_BOSS = 3,
  CASTER_TYPE_MOB = 4,
  CASTER_TYPE_STRUCTURE = 5,
  CASTER_TYPE_ARCHER = 6,
  CasterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CasterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CasterType_IsValid(int value);
constexpr CasterType CasterType_MIN = CASTER_TYPE_NONE;
constexpr CasterType CasterType_MAX = CASTER_TYPE_ARCHER;
constexpr int CasterType_ARRAYSIZE = CasterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CasterType_descriptor();
template<typename T>
inline const std::string& CasterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CasterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CasterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CasterType_descriptor(), enum_t_value);
}
inline bool CasterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CasterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CasterType>(
    CasterType_descriptor(), name, value);
}
enum CollisionType : int {
  COLLISION_TYPE_NONE = 0,
  COLLISION_TYPE_CIRCLE = 1,
  COLLISION_TYPE_BOX = 2,
  CollisionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CollisionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CollisionType_IsValid(int value);
constexpr CollisionType CollisionType_MIN = COLLISION_TYPE_NONE;
constexpr CollisionType CollisionType_MAX = COLLISION_TYPE_BOX;
constexpr int CollisionType_ARRAYSIZE = CollisionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollisionType_descriptor();
template<typename T>
inline const std::string& CollisionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollisionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollisionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollisionType_descriptor(), enum_t_value);
}
inline bool CollisionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CollisionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollisionType>(
    CollisionType_descriptor(), name, value);
}
enum DamageType : int {
  DAMAGE_TYPE_NORMAL = 0,
  DAMAGE_TYPE_DOT = 1,
  DAMAGE_TYPE_BUFF = 2,
  DamageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DamageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DamageType_IsValid(int value);
constexpr DamageType DamageType_MIN = DAMAGE_TYPE_NORMAL;
constexpr DamageType DamageType_MAX = DAMAGE_TYPE_BUFF;
constexpr int DamageType_ARRAYSIZE = DamageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DamageType_descriptor();
template<typename T>
inline const std::string& DamageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DamageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DamageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DamageType_descriptor(), enum_t_value);
}
inline bool DamageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DamageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DamageType>(
    DamageType_descriptor(), name, value);
}
enum CCType : int {
  CC_TYPE_NORMAL = 0,
  CC_TYPE_STUN = 1,
  CC_TYPE_SLOW = 2,
  CC_TYPE_AIRBORNE = 3,
  CCType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CCType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CCType_IsValid(int value);
constexpr CCType CCType_MIN = CC_TYPE_NORMAL;
constexpr CCType CCType_MAX = CC_TYPE_AIRBORNE;
constexpr int CCType_ARRAYSIZE = CCType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CCType_descriptor();
template<typename T>
inline const std::string& CCType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CCType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CCType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CCType_descriptor(), enum_t_value);
}
inline bool CCType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CCType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CCType>(
    CCType_descriptor(), name, value);
}
enum SkillType : int {
  SKILL_TYPE_NORMAL = 0,
  SKILL_TYPE_HOLD = 1,
  SKILL_TYPE_CASTING = 2,
  SKILL_TYPE_CHARGING = 3,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillType_IsValid(int value);
constexpr SkillType SkillType_MIN = SKILL_TYPE_NORMAL;
constexpr SkillType SkillType_MAX = SKILL_TYPE_CHARGING;
constexpr int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor();
template<typename T>
inline const std::string& SkillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillType_descriptor(), enum_t_value);
}
inline bool SkillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::MoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CasterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CasterType>() {
  return ::Protocol::CasterType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CollisionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CollisionType>() {
  return ::Protocol::CollisionType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::DamageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::DamageType>() {
  return ::Protocol::DamageType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CCType>() {
  return ::Protocol::CCType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillType>() {
  return ::Protocol::SkillType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
