// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class SkillInfo;
struct SkillInfoDefaultTypeInternal;
extern SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::SkillInfo* Arena::CreateMaybeMessage<::Protocol::SkillInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
    kStateFieldNumber = 6,
    kHpFieldNumber = 7,
    kMaxHpFieldNumber = 8,
    kStaminaFieldNumber = 9,
    kMaxStaminaFieldNumber = 10,
    kCastertypeFieldNumber = 11,
    kSkillstateFieldNumber = 12,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.MoveState state = 6;
  void clear_state();
  ::Protocol::MoveState state() const;
  void set_state(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_state() const;
  void _internal_set_state(::Protocol::MoveState value);
  public:

  // float hp = 7;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float max_hp = 8;
  void clear_max_hp();
  float max_hp() const;
  void set_max_hp(float value);
  private:
  float _internal_max_hp() const;
  void _internal_set_max_hp(float value);
  public:

  // float stamina = 9;
  void clear_stamina();
  float stamina() const;
  void set_stamina(float value);
  private:
  float _internal_stamina() const;
  void _internal_set_stamina(float value);
  public:

  // float max_stamina = 10;
  void clear_max_stamina();
  float max_stamina() const;
  void set_max_stamina(float value);
  private:
  float _internal_max_stamina() const;
  void _internal_set_max_stamina(float value);
  public:

  // .Protocol.CasterType castertype = 11;
  void clear_castertype();
  ::Protocol::CasterType castertype() const;
  void set_castertype(::Protocol::CasterType value);
  private:
  ::Protocol::CasterType _internal_castertype() const;
  void _internal_set_castertype(::Protocol::CasterType value);
  public:

  // .Protocol.SkillState skillstate = 12;
  void clear_skillstate();
  ::Protocol::SkillState skillstate() const;
  void set_skillstate(::Protocol::SkillState value);
  private:
  ::Protocol::SkillState _internal_skillstate() const;
  void _internal_set_skillstate(::Protocol::SkillState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float x_;
    float y_;
    float z_;
    float yaw_;
    int state_;
    float hp_;
    float max_hp_;
    float stamina_;
    float max_stamina_;
    int castertype_;
    int skillstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillInfo) */ {
 public:
  inline SkillInfo() : SkillInfo(nullptr) {}
  ~SkillInfo() override;
  explicit PROTOBUF_CONSTEXPR SkillInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillInfo(const SkillInfo& from);
  SkillInfo(SkillInfo&& from) noexcept
    : SkillInfo() {
    *this = ::std::move(from);
  }

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillInfo& operator=(SkillInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillInfo* internal_default_instance() {
    return reinterpret_cast<const SkillInfo*>(
               &_SkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SkillInfo& a, SkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillInfo& from) {
    SkillInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillInfo";
  }
  protected:
  explicit SkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kDamageTypeFieldNumber = 2,
    kCollisionTypeFieldNumber = 3,
    kCcTypeFieldNumber = 4,
    kSkillTypeFieldNumber = 5,
    kDamageFieldNumber = 6,
    kCooldownFieldNumber = 7,
    kSizeXFieldNumber = 8,
    kSizeYFieldNumber = 9,
  };
  // uint64 skill_id = 1;
  void clear_skill_id();
  uint64_t skill_id() const;
  void set_skill_id(uint64_t value);
  private:
  uint64_t _internal_skill_id() const;
  void _internal_set_skill_id(uint64_t value);
  public:

  // .Protocol.DamageType damage_type = 2;
  void clear_damage_type();
  ::Protocol::DamageType damage_type() const;
  void set_damage_type(::Protocol::DamageType value);
  private:
  ::Protocol::DamageType _internal_damage_type() const;
  void _internal_set_damage_type(::Protocol::DamageType value);
  public:

  // .Protocol.CollisionType collision_type = 3;
  void clear_collision_type();
  ::Protocol::CollisionType collision_type() const;
  void set_collision_type(::Protocol::CollisionType value);
  private:
  ::Protocol::CollisionType _internal_collision_type() const;
  void _internal_set_collision_type(::Protocol::CollisionType value);
  public:

  // .Protocol.CCType cc_type = 4;
  void clear_cc_type();
  ::Protocol::CCType cc_type() const;
  void set_cc_type(::Protocol::CCType value);
  private:
  ::Protocol::CCType _internal_cc_type() const;
  void _internal_set_cc_type(::Protocol::CCType value);
  public:

  // .Protocol.SkillType skill_type = 5;
  void clear_skill_type();
  ::Protocol::SkillType skill_type() const;
  void set_skill_type(::Protocol::SkillType value);
  private:
  ::Protocol::SkillType _internal_skill_type() const;
  void _internal_set_skill_type(::Protocol::SkillType value);
  public:

  // float damage = 6;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // float cooldown = 7;
  void clear_cooldown();
  float cooldown() const;
  void set_cooldown(float value);
  private:
  float _internal_cooldown() const;
  void _internal_set_cooldown(float value);
  public:

  // float size_x = 8;
  void clear_size_x();
  float size_x() const;
  void set_size_x(float value);
  private:
  float _internal_size_x() const;
  void _internal_set_size_x(float value);
  public:

  // float size_y = 9;
  void clear_size_y();
  float size_y() const;
  void set_size_y(float value);
  private:
  float _internal_size_y() const;
  void _internal_set_size_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t skill_id_;
    int damage_type_;
    int collision_type_;
    int cc_type_;
    int skill_type_;
    float damage_;
    float cooldown_;
    float size_x_;
    float size_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// float x = 2;
inline void ObjectInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float ObjectInfo::_internal_x() const {
  return _impl_.x_;
}
inline float ObjectInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.x)
  return _internal_x();
}
inline void ObjectInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ObjectInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.x)
}

// float y = 3;
inline void ObjectInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float ObjectInfo::_internal_y() const {
  return _impl_.y_;
}
inline float ObjectInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.y)
  return _internal_y();
}
inline void ObjectInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ObjectInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.y)
}

// float z = 4;
inline void ObjectInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float ObjectInfo::_internal_z() const {
  return _impl_.z_;
}
inline float ObjectInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.z)
  return _internal_z();
}
inline void ObjectInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void ObjectInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.z)
}

// float yaw = 5;
inline void ObjectInfo::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float ObjectInfo::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float ObjectInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.yaw)
  return _internal_yaw();
}
inline void ObjectInfo::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void ObjectInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.yaw)
}

// .Protocol.MoveState state = 6;
inline void ObjectInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::MoveState ObjectInfo::_internal_state() const {
  return static_cast< ::Protocol::MoveState >(_impl_.state_);
}
inline ::Protocol::MoveState ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.state)
  return _internal_state();
}
inline void ObjectInfo::_internal_set_state(::Protocol::MoveState value) {
  
  _impl_.state_ = value;
}
inline void ObjectInfo::set_state(::Protocol::MoveState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.state)
}

// float hp = 7;
inline void ObjectInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline float ObjectInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline float ObjectInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.hp)
  return _internal_hp();
}
inline void ObjectInfo::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void ObjectInfo::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.hp)
}

// float max_hp = 8;
inline void ObjectInfo::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline float ObjectInfo::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline float ObjectInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.max_hp)
  return _internal_max_hp();
}
inline void ObjectInfo::_internal_set_max_hp(float value) {
  
  _impl_.max_hp_ = value;
}
inline void ObjectInfo::set_max_hp(float value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.max_hp)
}

// float stamina = 9;
inline void ObjectInfo::clear_stamina() {
  _impl_.stamina_ = 0;
}
inline float ObjectInfo::_internal_stamina() const {
  return _impl_.stamina_;
}
inline float ObjectInfo::stamina() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.stamina)
  return _internal_stamina();
}
inline void ObjectInfo::_internal_set_stamina(float value) {
  
  _impl_.stamina_ = value;
}
inline void ObjectInfo::set_stamina(float value) {
  _internal_set_stamina(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.stamina)
}

// float max_stamina = 10;
inline void ObjectInfo::clear_max_stamina() {
  _impl_.max_stamina_ = 0;
}
inline float ObjectInfo::_internal_max_stamina() const {
  return _impl_.max_stamina_;
}
inline float ObjectInfo::max_stamina() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.max_stamina)
  return _internal_max_stamina();
}
inline void ObjectInfo::_internal_set_max_stamina(float value) {
  
  _impl_.max_stamina_ = value;
}
inline void ObjectInfo::set_max_stamina(float value) {
  _internal_set_max_stamina(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.max_stamina)
}

// .Protocol.CasterType castertype = 11;
inline void ObjectInfo::clear_castertype() {
  _impl_.castertype_ = 0;
}
inline ::Protocol::CasterType ObjectInfo::_internal_castertype() const {
  return static_cast< ::Protocol::CasterType >(_impl_.castertype_);
}
inline ::Protocol::CasterType ObjectInfo::castertype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.castertype)
  return _internal_castertype();
}
inline void ObjectInfo::_internal_set_castertype(::Protocol::CasterType value) {
  
  _impl_.castertype_ = value;
}
inline void ObjectInfo::set_castertype(::Protocol::CasterType value) {
  _internal_set_castertype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.castertype)
}

// .Protocol.SkillState skillstate = 12;
inline void ObjectInfo::clear_skillstate() {
  _impl_.skillstate_ = 0;
}
inline ::Protocol::SkillState ObjectInfo::_internal_skillstate() const {
  return static_cast< ::Protocol::SkillState >(_impl_.skillstate_);
}
inline ::Protocol::SkillState ObjectInfo::skillstate() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.skillstate)
  return _internal_skillstate();
}
inline void ObjectInfo::_internal_set_skillstate(::Protocol::SkillState value) {
  
  _impl_.skillstate_ = value;
}
inline void ObjectInfo::set_skillstate(::Protocol::SkillState value) {
  _internal_set_skillstate(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.skillstate)
}

// -------------------------------------------------------------------

// SkillInfo

// uint64 skill_id = 1;
inline void SkillInfo::clear_skill_id() {
  _impl_.skill_id_ = uint64_t{0u};
}
inline uint64_t SkillInfo::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline uint64_t SkillInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_id)
  return _internal_skill_id();
}
inline void SkillInfo::_internal_set_skill_id(uint64_t value) {
  
  _impl_.skill_id_ = value;
}
inline void SkillInfo::set_skill_id(uint64_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_id)
}

// .Protocol.DamageType damage_type = 2;
inline void SkillInfo::clear_damage_type() {
  _impl_.damage_type_ = 0;
}
inline ::Protocol::DamageType SkillInfo::_internal_damage_type() const {
  return static_cast< ::Protocol::DamageType >(_impl_.damage_type_);
}
inline ::Protocol::DamageType SkillInfo::damage_type() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.damage_type)
  return _internal_damage_type();
}
inline void SkillInfo::_internal_set_damage_type(::Protocol::DamageType value) {
  
  _impl_.damage_type_ = value;
}
inline void SkillInfo::set_damage_type(::Protocol::DamageType value) {
  _internal_set_damage_type(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.damage_type)
}

// .Protocol.CollisionType collision_type = 3;
inline void SkillInfo::clear_collision_type() {
  _impl_.collision_type_ = 0;
}
inline ::Protocol::CollisionType SkillInfo::_internal_collision_type() const {
  return static_cast< ::Protocol::CollisionType >(_impl_.collision_type_);
}
inline ::Protocol::CollisionType SkillInfo::collision_type() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.collision_type)
  return _internal_collision_type();
}
inline void SkillInfo::_internal_set_collision_type(::Protocol::CollisionType value) {
  
  _impl_.collision_type_ = value;
}
inline void SkillInfo::set_collision_type(::Protocol::CollisionType value) {
  _internal_set_collision_type(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.collision_type)
}

// .Protocol.CCType cc_type = 4;
inline void SkillInfo::clear_cc_type() {
  _impl_.cc_type_ = 0;
}
inline ::Protocol::CCType SkillInfo::_internal_cc_type() const {
  return static_cast< ::Protocol::CCType >(_impl_.cc_type_);
}
inline ::Protocol::CCType SkillInfo::cc_type() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.cc_type)
  return _internal_cc_type();
}
inline void SkillInfo::_internal_set_cc_type(::Protocol::CCType value) {
  
  _impl_.cc_type_ = value;
}
inline void SkillInfo::set_cc_type(::Protocol::CCType value) {
  _internal_set_cc_type(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.cc_type)
}

// .Protocol.SkillType skill_type = 5;
inline void SkillInfo::clear_skill_type() {
  _impl_.skill_type_ = 0;
}
inline ::Protocol::SkillType SkillInfo::_internal_skill_type() const {
  return static_cast< ::Protocol::SkillType >(_impl_.skill_type_);
}
inline ::Protocol::SkillType SkillInfo::skill_type() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_type)
  return _internal_skill_type();
}
inline void SkillInfo::_internal_set_skill_type(::Protocol::SkillType value) {
  
  _impl_.skill_type_ = value;
}
inline void SkillInfo::set_skill_type(::Protocol::SkillType value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_type)
}

// float damage = 6;
inline void SkillInfo::clear_damage() {
  _impl_.damage_ = 0;
}
inline float SkillInfo::_internal_damage() const {
  return _impl_.damage_;
}
inline float SkillInfo::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.damage)
  return _internal_damage();
}
inline void SkillInfo::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void SkillInfo::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.damage)
}

// float cooldown = 7;
inline void SkillInfo::clear_cooldown() {
  _impl_.cooldown_ = 0;
}
inline float SkillInfo::_internal_cooldown() const {
  return _impl_.cooldown_;
}
inline float SkillInfo::cooldown() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.cooldown)
  return _internal_cooldown();
}
inline void SkillInfo::_internal_set_cooldown(float value) {
  
  _impl_.cooldown_ = value;
}
inline void SkillInfo::set_cooldown(float value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.cooldown)
}

// float size_x = 8;
inline void SkillInfo::clear_size_x() {
  _impl_.size_x_ = 0;
}
inline float SkillInfo::_internal_size_x() const {
  return _impl_.size_x_;
}
inline float SkillInfo::size_x() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.size_x)
  return _internal_size_x();
}
inline void SkillInfo::_internal_set_size_x(float value) {
  
  _impl_.size_x_ = value;
}
inline void SkillInfo::set_size_x(float value) {
  _internal_set_size_x(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.size_x)
}

// float size_y = 9;
inline void SkillInfo::clear_size_y() {
  _impl_.size_y_ = 0;
}
inline float SkillInfo::_internal_size_y() const {
  return _impl_.size_y_;
}
inline float SkillInfo::size_y() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.size_y)
  return _internal_size_y();
}
inline void SkillInfo::_internal_set_size_y(float value) {
  
  _impl_.size_y_ = value;
}
inline void SkillInfo::set_size_y(float value) {
  _internal_set_size_y(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.size_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
